{"name":"Mod h2","tagline":"HTTP/2 module for Apache httpd","body":"\r\nmod_h2 - a http/2 modules for apache httpd\r\n==========================================\r\n\r\nCopyright (C) 2015 greenbytes GmbH\r\n\r\nCopying and distribution of this file, with or without modification,\r\nare permitted in any medium without royalty provided the copyright\r\nnotice and this notice are preserved.  This file is offered as-is,\r\nwithout warranty of any kind. See LICENSE for details.\r\n\r\n\r\n\r\nThis repository contains a Apache httpd module implementing the HTTP2\r\nprotocol. It uses nghttp2 (https://nghttp2.org) as base engine and connects\r\nit with the Apache infrastructure.\r\n\r\n\r\nStatus\r\n------\r\nIn development. Definitely not ready for a production environment. Use at\r\nyour own risk. Very alpha.\r\n\r\n\r\nFeatures\r\n--------\r\nThis module supports the \"h2\" (HTTP2 over TLS) and \"h2c\" (HTTP2 over plain\r\nHTTP connections via Upgrade). You can enable it for the whole server or\r\nfor specific virtual hosts only. More on this below on \"Configuration\".\r\n\r\n\r\nConfiguration\r\n-------------\r\nThe test setup in test/conf/* that gets installed in gen/install for the\r\nlocal httpd build contains some simple examples of how this module can\r\nbe configured.\r\n\r\nThere are several configuration commands available when mod_h2 is loaded,\r\nsuch as:\r\n- H2Engine (on/off), \"on\"    to enable HTTP/2 protocol handling\r\n- H2MaxSessionStreams n      maximum number of open streams per session\r\n- H2InitialWindowSize n      initial window size on client DATA\r\n- H2MaxHeaderListSize n      maximum acceptable size of request headers\r\n- H2MinWorkers n             minimum number of worker threads per child\r\n- H2MaxWorkers n             maximum number of worker threads per child\r\n- H2StreamMaxMemSize n       maximum number of bytes buffered in memory for a stream\r\n\r\n\r\n\r\nDependencies\r\n------------\r\n1. The module is written in plain C and links to libnghttp2 and the\r\n   apache runtime.\r\n2. For \"h2\" support - the part of HTTP2 that uses TLS - a patched mod_ssl\r\n   needs to be present in the server. The patch is available in httpd/patches\r\n   and automatically applied in sandbox mode.\r\n3. For ALPN/NPN protocol negotiation (the basic TLS HELLO part) to work,\r\n   at least OpenSSL 1.0.1 is needed (OpenSSL 1.0.2 perferred).\r\n4. mod_h2 currently only supports the mpm_worker module.\r\n\r\n\r\nInstallation\r\n------------\r\nmod_h2 is using autoconf/automake for configurtion and build handling. If you\r\nhave a git checkout, refer to 'Build from git' below. If you have a release\r\nextracted, you need to:\r\n    > cd mod_h2-x.x.x\r\n    > ./configure\r\n    > make\r\n\r\nFor general handling of 'configure', see INSTALL. For mod_h2 specifically,\r\nthere are two arguments to know:\r\n    --enable-sandbox     build a complete sandbox installation with own httpd,\r\n                         own libnghttp2\r\n    --with-apxs=<pathtoapxs>\r\n                         for a non-sandboxed installation where the apxs\r\n                         (from the apache development environment) is in an\r\n                         unusual location.\r\n\r\nIf you run 'configure' without arguments, it assumes a non-sandbox'ed built\r\nwhere apxs and libnghttp2 are properly installed.\r\n\r\n\r\nSandbox Installation:\r\n\r\nThe sandbox installation puts everything in ./gen/install: httpd, nghttp2, curl\r\nand other fine things. For testing the module, or just trying it out, this\r\nhas the following advantages:\r\n    - conflicts with \"wrong\" versions already installed on your system are avoided\r\n    - you can do the installation and test without root privileges\r\n    - certain patches can be applied that are necessary for all features to work, see \"Dependencies\".\"\r\n\r\n\r\nBuild from git\r\n--------------\r\n\r\nBuilding from git is easy, but please be sure that at least autoconf 2.68 is\r\nused::\r\n\r\n    > autoreconf -i\r\n    > automake\r\n    > autoconf\r\n    > ./configure\r\n    > make\r\n\r\n\r\nSupported Platforms\r\n-------------------\r\nmod_h2 has been developed under Ubuntu 14.04 LTS and OS X 10.10. The module\r\nitself depends only on an installed APXS (the Apache runtime platform) and\r\nlibnghttp2. As long as both are present, the module itself should build\r\njust fine.\r\n\r\nUbuntu :Install the prerequisite software. On a 14.04 LTS server, that should be:\r\n> sudo apt-get install git gcc g++ libpcre3-dev libcunit1-dev libev-dev libjansson-dev libjemalloc-dev cython make binutils autoconf automake autotools-dev libtool pkg-config zlib1g-dev libssl-dev libxml2-dev libevent-dev python3.4-dev libevent-openssl-2.0-5\r\n\r\nOS X: on OS X 10.10, building the project requires a homebrew installation and the following packages installed via brew:\r\n- pkg-config\r\n\r\n* for httpd the Makefile will download and install:\r\n- pcre\r\n- apr + apr-util\r\n- openssl\r\nexact versions and download urls in httpd/Makefile\r\n\r\n* for nghttp2 the Makefile will download and install:\r\n- zlib\r\n- libev\r\nexact versions and download urls in httpd/Makefile\r\n\r\n\r\n\r\nArchitecture, Limits, Details\r\n-----------------------------\r\nSee DISCUSS.\r\n\r\n\r\nTODO\r\n----\r\n- Thanks to the excellent nghttp2, the module currently supports h2-14 and\r\n  h2c-14. Piority handling is implemented in nghttp2, but not tested with the\r\n  mod_h2 and there are several areas in work scheduling where priority handling\r\n  needs to be added to mod_h2.\r\n- Replace own thread pool with the ones from apr-util, use priority scheduling\r\n  (Initial tests show a 10% perf penalty, why?)\r\n- Performance is not where it should be, request/s suffer from current\r\n  pseudo-connection handling and other things. See DISCUSS\r\n- Proper documentation needs to be added\r\n- Test cases need to be written to cover edge cases with connection abort,\r\n  stream reset, priority requests, etc.\r\n- mpm_event: can we support it?\r\n- Chunk handling for request input data (h2_request).\r\n- Detection at runtime that we are indeed running with mpm_worker, an error\r\n  message to the log and stay inactive otherwise.\r\n- http trailers are not implemented\r\n\r\nLicensing\r\n---------\r\n\r\nPlease see the file called LICENSE.\r\n\r\n\r\nCredits\r\n-------\r\nThis work has been funded by the GSM Association (http://gsma.com). The module\r\nitself was heavily influenced by mod_spdy, the Google implementation of their\r\nSPDY protocol. And without Tatsuhiro Tsujikawa excellent nghttp2 work, this\r\nwould not have been possible.\r\n\r\n\r\nMÃ¼nster, 10.3.2015,\r\n\r\nStefan Eissing, greenbytes GmbH\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}